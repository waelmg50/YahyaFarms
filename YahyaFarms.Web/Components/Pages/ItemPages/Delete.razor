@page "/items/delete"

@using Microsoft.EntityFrameworkCore
@using YahyaFarms.Models
@inject IDbContextFactory<YahyaFarms.Web.Data.YahyaFarmsWebDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>حذف الصنف</PageTitle>

<h1>حذف الصنف</h1>

<h3>هل أنت متأكد من حذف هذا الصنف?</h3>
<div>
    <h4>بيانات الصنف</h4>
    <hr />
    @if (item is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">اسم الصنف</dt>
            <dd class="col-sm-10">@item.ItemName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">الوصف</dt>
            <dd class="col-sm-10">@item.ItemDescription</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">السعر الحالي</dt>
            <dd class="col-sm-10">@item.CurrentPrice</dd>
        </dl>
        <EditForm method="post" Model="item" OnValidSubmit="DeleteItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(item is null)">حذف</button> |
            <a href="/items">العودة للقائمة السابقة</a>
        </EditForm>
    }
</div>

@code {
    Item? item;

    [SupplyParameterFromQuery]
    public int ItemID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        item = await context.Item.FirstOrDefaultAsync(m => m.ItemID == ItemID);

        if (item is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Item.Remove(item!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/items");
    }
}
