@page "/Items/edit"

@using Microsoft.EntityFrameworkCore
@using YahyaFarms.Models
@using YahyaFarms.Web.Service.IService;
@inject IDbContextFactory<YahyaFarms.Web.Data.YahyaFarmsWebDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IFileUpload iFileUpload;
@inject IJSRuntime myJSRunTime;
@rendermode InteractiveServer

<PageTitle>تعديل الصنف</PageTitle>

<h1>تعديل الصنف</h1>

<h4>بيانات الصنف :</h4>
<hr />
@if (Item is null)
{
    <p><em>تحميل ...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Item" OnValidSubmit="UpdateItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Item.ItemID" value="@Item.ItemID" />
                <div class="mb-3">
                    <label for="itemname" class="form-label">اسم الصنف:</label>
                    <InputText id="itemname" @bind-Value="Item.ItemName" class="form-control" />
                    <ValidationMessage For="() => Item.ItemName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itemdescription" class="form-label">الوصف:</label>
                    <InputText id="itemdescription" @bind-Value="Item.ItemDescription" class="form-control" />
                    <ValidationMessage For="() => Item.ItemDescription" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="currentprice" class="form-label">السعر الحالي:</label>
                    <InputNumber id="currentprice" @bind-Value="Item.CurrentPrice" class="form-control" />
                    <ValidationMessage For="() => Item.CurrentPrice" class="text-danger" />
                </div>
                <div class="form-group">
                    <InputFile title="إضافة الصور" OnChange="@UploadImage" multiple></InputFile>
                    <br />
                    <div class="row" style="position:relative">
                        @if (Item.ImagesUrls != null && Item.ImagesUrls.Count > 0)
                        {
                            int iSerial = 1;
                            <table>
                                @foreach (string imageUrl in Item.ImagesUrls)
                                {
                                    <tr>
                                        <td>
                                            <div class="col-md-2 mt-3" style="position:relative">
                                                <img class="item-image" src="@imageUrl" />
                                                <span class="item-serial">@iSerial</span>
                                                <button type="button" title="حذف الصورة" @onclick="()=>DeleteImage(imageUrl)" class="btn btn-danger mt-1 item-delete">X</button>
                                            </div>
                                        </td>
                                    </tr>
                                    iSerial++;
                                }
                            </table>
                        }
                    </div>
                </div>
                <br />
                <button type="submit" class="btn btn-primary">تعديل</button>
            </EditForm>
        </div>
    </div>
}
<br />
<div>
    <a href="/items">العودة لقائمة الأصناف</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ItemID { get; set; }

    [SupplyParameterFromForm]
    public Item? Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Item ??= await context.Item.Include(x => x.ItemImages).FirstOrDefaultAsync(m => m.ItemID == ItemID);
        if (Item?.ItemImages != null)
            Item.ImagesUrls = Item.ItemImages.Select(x => x.ImageURL).ToList();
        if (Item is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Item!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ItemExists(Item!.ItemID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/items");
    }

    bool ItemExists(int itemid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Item.Any(e => e.ItemID == itemid);
    }
    public async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            List<string> images = new();
            if (e.FileCount > 0)
            {
                foreach (var item in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(item.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".jpeg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".gif" || fileInfo.Extension.ToLower() == ".bmp" || fileInfo.Extension.ToLower() == ".jpe")
                    {
                        string uploadedImagePath = await iFileUpload.UploadFile(item);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await myJSRunTime.ToastrError("من فضلك اختر ملفات من نوع <br> .jpg, .jpeg, .png, .gif, .bmp, .jpe");
                        return;
                    }
                }
                if (images.Count > 0)
                {
                    if (Item.ImagesUrls == null || Item.ImagesUrls.Count < 1)
                        Item.ImagesUrls = new List<string>();
                    Item.ImagesUrls.AddRange(images);
                }
                else
                    await myJSRunTime.ToastrError("فشل رفع الملفات");
            }
        }
        catch (Exception ex)
        {
            await myJSRunTime.ToastrError(ex.Message);
        }
    }
    public async Task DeleteImage(string imageUrl)
    {
        try
        {
            int imageIndex = Item.ImagesUrls.FindIndex(x => x == imageUrl);
            string imageFileName = imageUrl.Replace("ItemsImages/", string.Empty);
            bool deleteResult = iFileUpload.DeleteFile(imageFileName);
            Item.ImagesUrls.RemoveAt(imageIndex);
            if (deleteResult)
                await myJSRunTime.ToastrSuccess("تم حذف الصورة بنجاح.");
        }
        catch (Exception ex)
        {
            await myJSRunTime.ToastrError(ex.Message);
        }
    }
}
