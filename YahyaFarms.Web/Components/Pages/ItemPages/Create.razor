@page "/items/create"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using YahyaFarms.Models
@using YahyaFarms.Web.Service.IService;

@inject IDbContextFactory<YahyaFarms.Web.Data.YahyaFarmsWebDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IFileUpload iFileUpload;
@inject IJSRuntime myJSRunTime;
@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

<PageTitle>صنف جديد</PageTitle>

<h1>صنف جديد</h1>

<h4>بيانات الصنف</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="item" OnValidSubmit="AddItem" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="itemname" class="form-label">اسم الصنف:</label>
                <InputText id="itemname" @bind-Value="item.ItemName" class="form-control" />
                <ValidationMessage For="() => item.ItemName" class="text-danger" />
            </div>
            <div class="mb-3" style="height:200px">
                <label for="itemdescription" class="form-label">الوصف:</label>
                <BlazoredTextEditor @ref="@QuillHtml" Placeholder="من فضلك أدخل وصف الصنف">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                        @* <h4>This Toolbar works with HTML</h4>
                        <a href="http://BlazorHelpWebsite.com">
                        BlazorHelpWebsite.com
                        </a> *@
                    </EditorContent>
                </BlazoredTextEditor>
                @* <InputText id="itemdescription" @bind-Value="Item.ItemDescription" class="form-control" /> *@
                <ValidationMessage For="() => item.ItemDescription" class="text-danger" />
            </div>
            <br />
            <div class="mb-3" style="padding-top:75px">
                <label for="currentprice" class="form-label">السعر الحالي:</label>
                <InputNumber id="currentprice" @bind-Value="item.CurrentPrice" class="form-control" />
                <ValidationMessage For="() => item.CurrentPrice" class="text-danger" />
            </div>
            <div class="form-group">
                <InputFile title="إضافة الصور" OnChange="@UploadImage" multiple></InputFile>
                <br />
                <div class="row" style="position:relative">
                    @if (ShowSpinner)
                    {
                        <div class="col-md-12">
                            <span><i class="fas fa-spinner fa-pulse"></i>من فضلك انتظر <br />جاري تحميل الصور</span>
                        </div>
                    }
                    @if (item.ImagesUrls != null && item.ImagesUrls.Count > 0)
                    {
                        int iSerial = 1, iRowCount = item.ImagesUrls.Count % 6 == 0 ? (item.ImagesUrls.Count / 6) : (item.ImagesUrls.Count / 6) + 1;
                        <table>
                            @for (int iRow = 0; iRow < iRowCount; iRow++)
                            {
                                <tr>
                                    @for (int iColumn = 0; iColumn < 6 && iSerial <= item.ImagesUrls.Count; iColumn++)
                                    {
                                        string imageUrl = item.ImagesUrls[iSerial - 1];
                                        <td>
                                            <div class="col-md-2 mt-3" style="position:relative">
                                                <img class="item-image" src="@imageUrl" />
                                                <span class="item-serial">@iSerial</span>
                                                <button type="button" title="حذف الصورة" @onclick="()=>DeleteImage(imageUrl)" class="btn btn-danger mt-1 item-delete">X</button>
                                            </div>
                                        </td>
                                        iSerial++;
                                    }
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
            <br />
            <button type="submit" class="btn btn-primary">إدخال</button>
        </EditForm>
    </div>
</div>
<br />
<div>
    <a href="/items">الرجوع للقائمة السابقة</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Item item { get; set; } = new();
    public bool ShowSpinner { get; set; }
    public BlazoredTextEditor QuillHtml { get; set; } = default!;
    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddItem()
    {
        using var context = DbFactory.CreateDbContext();
        if (context.Items.Any(x => x.ItemName == item.ItemName))
        {
            await myJSRunTime.ToastrError("اسم هذا الصنف مسجل من قبل");
            return;
        }
        item.ItemDescription = await QuillHtml.GetHTML();
        if (item.ImagesUrls != null && item.ImagesUrls.Count > 0)
        {
            item.ItemImages = new List<ItemImage>();
            foreach (string strImage in item.ImagesUrls)
            {
                ItemImage itemImage = new ItemImage()
                    {
                        ImageURL = strImage
                    };
                item.ItemImages.Add(itemImage);
            }
        }
        context.Items.Add(item);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/items");
        await myJSRunTime.ToastrSuccess(SD.Success_Operation);
    }
    public async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            ShowSpinner = true;
            List<string> images = new();
            if (e.FileCount > 0)
            {
                if (e.FileCount > 1000)
                {
                    await myJSRunTime.ToastrError("لا يمكن رفع أكثر من 1000 ملف !!!");
                    return;
                }
                foreach (var item in e.GetMultipleFiles(1000))
                {
                    FileInfo fileInfo = new FileInfo(item.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".jpeg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".gif" || fileInfo.Extension.ToLower() == ".bmp" || fileInfo.Extension.ToLower() == ".jpe")
                    {
                        string uploadedImagePath = await iFileUpload.UploadFile(item);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await myJSRunTime.ToastrError("من فضلك اختر ملفات من نوع <br> .jpg, .jpeg, .png, .gif, .bmp, .jpe");
                        return;
                    }
                }
                if (images.Count > 0)
                {
                    if (item.ImagesUrls == null || item.ImagesUrls.Count < 1)
                        item.ImagesUrls = new List<string>();
                    item.ImagesUrls.AddRange(images);
                }
                else
                    await myJSRunTime.ToastrError("فشل رفع الملفات");
            }
        }
        catch (Exception ex)
        {
            await myJSRunTime.ToastrError(ex.Message);
        }
        finally
        {
            ShowSpinner = false;
        }
    }
    public async Task DeleteImage(string imageUrl)
    {
        try
        {
            int imageIndex = item.ImagesUrls.FindIndex(x => x == imageUrl);
            string imageFileName = imageUrl.Replace("ItemsImages/", string.Empty);
            bool deleteResult = iFileUpload.DeleteFile(imageFileName);
            item.ImagesUrls.RemoveAt(imageIndex);
            if (deleteResult)
                await myJSRunTime.ToastrSuccess("تم حذف الصورة بنجاح.");
        }
        catch (Exception ex)
        {
            await myJSRunTime.ToastrError(ex.Message);
        }
    }
}
